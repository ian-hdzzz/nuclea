<style>
    .chart-container {
        width: 80%;
        height: 80%;
        margin: 30px auto;
    }
    canvas#radar-chart {
        width: 100% !important;
        height: 100% !important;
    }
</style>

<div class="chart-container">
    <canvas id="radar-chart"></canvas>
</div>
<script>
     document.addEventListener('DOMContentLoaded', function() {
    const ctx = document.getElementById('radar-chart').getContext('2d');
    
    // Obtener los valores iniciales
    const workload = parseInt(document.getElementById('workload').value);
    const health = parseInt(document.getElementById('health').value);
    const recognition = parseInt(document.getElementById('recognition').value);
    const emotionalHealth = parseInt(document.getElementById('emotional-health').value);
    const workLifeBalance = parseInt(document.getElementById('work-life-balance').value);
    
    // Crear el gr치fico
    const radarChart = new Chart(ctx, {
      type: 'radar',
      data: {
        labels: [
          'Carga de trabajo',
          'Salud',
          'Reconocimiento',
          'Salud emocional',
          'Equilibrio trabajo-vida'
        ],
        datasets: [{
        label: '',
        data: [workload, health, recognition, emotionalHealth, workLifeBalance],
        backgroundColor: 'rgba(255, 0, 0, 0.5)',
        borderColor: 'rgba(255, 0, 0, 0.8)',
        pointBackgroundColor: 'rgba(255, 0, 0, 1)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(255, 0, 0, 1)'
      }]
      },
      options: {
        scales: {
          r: {
            min: 0,
            max: 5,
            ticks: {
              stepSize: 1,
              display: true,
              backdropColor: 'transparent'
            },
            grid: {
              color: 'rgba(255, 255, 255, 0.1)'
            },
            angleLines: {
              color: 'rgba(255, 255, 255, 0.1)'
            },
            pointLabels: {
              color: 'rgba(255, 255, 255, 0.8)',
              font: {
                size: 12
              }
            }
          }
        },
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });
    
    // Actualizar el gr치fico cuando cambian los selectores
    const selects = document.querySelectorAll('select');
    selects.forEach(select => {
    select.addEventListener('change', function () {
      const workload = parseInt(document.getElementById('workload').value);
      const health = parseInt(document.getElementById('health').value);
      const recognition = parseInt(document.getElementById('recognition').value);
      const emotionalHealth = parseInt(document.getElementById('emotional-health').value);
      const workLifeBalance = parseInt(document.getElementById('work-life-balance').value);

      const newData = [workload, health, recognition, emotionalHealth, workLifeBalance];
      const average = newData.reduce((a, b) => a + b, 0) / newData.length;

      let color;
      if (average <= 1.5) {
        color = 'rgba(255, 0, 0'; // rojo
      } else if (average <= 2.5) {
        color = 'rgba(255, 215, 0'; // amarillo
      } else if (average <= 3.5) {
        color = 'rgba(0, 128, 0'; // verde
      } else {
        color = 'rgba(4, 205, 250'; // azul
      }

      radarChart.data.datasets[0].data = newData;
      radarChart.data.datasets[0].backgroundColor = `${color}, 0.5)`;
      radarChart.data.datasets[0].borderColor = `${color}, 0.8)`;
      radarChart.data.datasets[0].pointBackgroundColor = `${color}, 1)`;
      radarChart.data.datasets[0].pointHoverBorderColor = `${color}, 1)`;
      radarChart.update();
    });
  });
    
    // Bot칩n de guardar
    document.getElementById('save-button').addEventListener('click', function() {
      alert('Evaluaci칩n guardada');
    });
  });
       
</script>
