<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link rel="stylesheet" href="/css/departament.css">
    <meta name="csrf-token" content="{{csrfToken}}">
    <style>
        /* Tutorial styles */
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 2000;
            display: none;
            justify-content: center;
            align-items: center;
        }

        .tutorial-tooltip {
            position: absolute;
            background-color: white;
            color: #333;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            width: 300px;
            z-index: 2100;
            animation: fadeIn 0.5s;
            transition: all 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .tutorial-tooltip h3 {
            margin-bottom: 10px;
            color: #2762ea;
        }

        .tutorial-tooltip p {
            margin-bottom: 15px;
            line-height: 1.5;
            color: #555;
        }

        .tooltip-buttons {
            display: flex;
            justify-content: space-between;
        }

        .tooltip-button {
            padding: 8px 15px;
            background: linear-gradient(to right, #2762ea 0%, #4162f0 29%, #8061fd 100%);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .tooltip-button:hover {
            opacity: 0.9;
        }

        .tooltip-button.secondary {
            background: #6c757d;
        }

        .tooltip-button.secondary:hover {
            background: #5a6268;
        }

        .highlight {
            position: absolute;
            border: 2px solid #2762ea;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(74, 108, 247, 0.5);
            z-index: 2050;
            pointer-events: none;
            transition: all 0.3s ease;
        }

        .completion-message {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            max-width: 400px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

        .completion-message h2 {
            color: #2762ea;
            margin-bottom: 15px;
        }

        .completion-message p {
            margin-bottom: 20px;
            color: #555;
        }

        /* Tutorial toggle button */
        .tutorial-toggle {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 10px 15px;
            background: linear-gradient(to right, #2762ea 0%, #4162f0 29%, #8061fd 100%);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            z-index: 1500;
            display: flex;
            align-items: center;
            gap: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .tutorial-toggle:hover {
            opacity: 0.9;
        }

        .tutorial-toggle i {
            font-size: 16px;
        }

        /* Progress indicators */
        .progress-dots {
            display: flex;
            justify-content: center;
            margin-top: 15px;
            gap: 5px;
        }

        .progress-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #ccc;
        }

        .progress-dot.active {
            width: 24px;
            background: linear-gradient(to right, #2762ea 0%, #4162f0 29%, #8061fd 100%);
            border-radius: 4px;
        }

        /* Loader styles */
        .loader-wrapper {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(12, 16, 25, 0.9);
            z-index: 2000;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .loader-container {
            text-align: center;
        }

        .bars-loader {
            display: flex;
            justify-content: center;
            gap: 5px;
        }

        .bar {
            width: 5px;
            height: 30px;
            background: linear-gradient(to right, #2762ea 0%, #4162f0 29%, #8061fd 100%);
            animation: loader 1s infinite alternate;
        }

        .bar:nth-child(2) {
            animation-delay: 0.1s;
        }

        .bar:nth-child(3) {
            animation-delay: 0.2s;
        }

        .bar:nth-child(4) {
            animation-delay: 0.3s;
        }

        .bar:nth-child(5) {
            animation-delay: 0.4s;
        }

        @keyframes loader {
            from {
                transform: scaleY(1);
            }
            to {
                transform: scaleY(1.5);
            }
        }

        .loading-text {
            margin-top: 15px;
            color: #2762ea;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="top-container">
        <div class="search-input-container" id="search-section">
            {{> search placeholder="Department name..." searchId="search-input"}}
        </div>
        <div class="second-container">
            <div>
                <i class="fa-solid fa-bell hidden"></i>
            </div>
            <div>
                <i class="fa-solid fa-user hidden"></i>
            </div>
        </div>
        <div class="add-btn-container" id="add-department-btn">
            <i class="fa-regular fa-square-plus"></i>
            <input type="button" value="Add Department" class="add-btn" id="openModal">
        </div>
    </div>

    {{#if info}}
        <div "top-container">
            <div class="nav-bar">
                <div class="first-container">
                    <div class="notification is-success">
                        {{info}}
                    </div>
                </div>
            </div>
        </div>
    {{/if}}
    {{#if error}}
        <div "top-container">
            <div class="nav-bar">
                <div class="first-container">
                    <div class="notification is-danger">
                        {{error}}
                    </div>
                </div>
            </div>
        </div>
    {{/if}}

    <div class="content" id="table-section">
        <div class="nav-content">
            <h2>Department Management</h2>
        </div>
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Department Name</th>
                    <th>Company Name</th>
                    <th>Description</th>
                    <th>State</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="department-body">
                {{#each datos}}
                <tr>
                    <td>{{idDepartamento}}</td>
                    <td>{{Nombre_departamento}}</td>
                    <td>{{Nombre_empresa}}</td>
                    <td>{{Descripcion}}</td>
                    <td class="state">
                        <span class="{{#if Estado}}active{{else}}inactive{{/if}}">
                            <div class="dot"></div>
                            {{#if Estado}}Active{{else}}Inactive{{/if}}
                        </span>
                    </td>
                    <td>
                        <div class="dropdown" id="actions-dropdown">
                            <button class="action-btn">Manage</button>
                            <div class="dropdown-content">
                                <button class="edit-btn" onclick="location.href='/nuclea/departament/update/{{idDepartamento}}'">
                                    <i class="fa-solid fa-pen-to-square"></i> Edit
                                </button>
                                <button class="delete-btn" onclick="confirmDeleteDepartamento('{{idDepartamento}}')">
                                    <i class="fa-solid fa-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </td>
                </tr>
                {{/each}}
            </tbody>
        </table>

        {{#if error}}
            <p style="text-align: center; margin-top: 20px;">No departments existing</p>
        {{/if}}

        <!-- Modal -->
        <div id="modal" class="modal hidden">
            <div class="modal-content">
                <button id="closeModal" class="close-btn">âœ–</button>
                <h2 class="title-modal">New Department</h2>
                <p class="description">Fill in the required details to register this Department</p>

                <form method="POST" action="/nuclea/departamentos">
                    <input type="hidden" name="_csrf" value="{{csrfToken}}">

                    <div class="form-group">
                        <label for="nombre">Department Name</label>
                        <input type="text" id="nombre" name="nombre" placeholder="e.g. Finance" class="text-modal" required>
                    </div>

                    <div class="form-group">
                        <label for="empresa">Select Company</label>
                        <select id="empresa" name="empresa" class="text-modal" required>
                            <option value="">- Select a Company</option>
                            {{#each empresas}}
                                <option value="{{Id_empresa}}">{{Nombre}}</option>
                            {{/each}}
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="descripcion">Description</label>
                        <input type="text" id="descripcion" name="descripcion" placeholder="e.g. Manage Financial Operations" class="text-modal" required>
                    </div>

                    <div class="form-group">
                        <label for="estatus">Status</label>
                        <select id="statusSelect" name="estatus" class="text-modal" required>
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                        </select>
                    </div>

                    <button type="submit" class="btn-submit">Add Department</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Tutorial Toggle Button -->
    <button class="tutorial-toggle" id="tutorial-toggle">
        <i class="fa-solid fa-question-circle"></i>
        <span>Start Tour</span>
    </button>

    <!-- Tutorial Overlay -->
    <div class="overlay" id="tutorial-overlay">
        <div class="highlight" id="highlight"></div>
        <div class="tutorial-tooltip" id="tutorial-tooltip">
            <h3>Welcome to the Tutorial</h3>
            <p>This tour will guide you through the Department Management system.</p>
            <div class="tooltip-buttons">
                <button class="tooltip-button" id="next-button">Start Tour</button>
            </div>
        </div>
    </div>

    <script src="/js/addDepartament.js"></script>
    <script src="/js/searchdepartament.js"></script>
    <script>
        // Tutorial steps configuration
        const tutorialSteps = [
            {
                element: "welcome",
                title: "Department Management System",
                content: "This guided tour will help you understand how to manage departments in the system."
            },
            {
                element: "search-section",
                title: "Search Functionality",
                content: "Use this search box to quickly find departments by name."
            },
            {
                element: "add-department-btn",
                title: "Add New Department",
                content: "Click this button to add a new department to the system."
            },
            {
                element: "table-section",
                title: "Departments Table",
                content: "This table displays all existing departments with their details including ID, name, company, description, and status. You can see which departments are active or inactive."
            },
            {
                element: "actions-dropdown",
                title: "Department Actions",
                content: "Click the 'Manage' button to access options for editing or deleting a department."
            },
            {
                element: "modal-content",
                title: "Add Department Form",
                content: "This form allows you to add a new department to the system. Fill in the department name, select a company, provide a description, and set its status.",
                showModal: true
            },
            {
                element: "submit-btn",
                title: "Save Department",
                content: "After filling out all required fields, click this button to save the new department to the system.",
                showModal: true
            },
            {
                element: "complete",
                title: "Tour Complete!",
                content: "You're now ready to use the Department Management system. You can restart the tour anytime using the 'Start Tour' button."
            }
        ];

        let currentStep = 0;
        let isTutorialActive = false;

        // Hide loader when page is loaded
        window.addEventListener('load', function() {
            setTimeout(function() {
                document.getElementById('loaderWrapper').style.display = 'none';
                // Auto-start tutorial after loader is hidden
                setTimeout(startTutorial, 1000);
            }, 1500);
        });

        // Initialize tutorial toggle button
        document.getElementById('tutorial-toggle').addEventListener('click', function() {
            startTutorial();
        });

        // Function to start the tutorial
        function startTutorial() {
            const tutorialOverlay = document.getElementById('tutorial-overlay');
            tutorialOverlay.style.display = 'flex';
            isTutorialActive = true;
            currentStep = 0;
            showTutorialStep(currentStep);
        }

        // Function to show a specific tutorial step
        function showTutorialStep(stepIndex) {
            if (stepIndex >= tutorialSteps.length) {
                endTutorial();
                return;
            }

            const step = tutorialSteps[stepIndex];
            const tooltip = document.getElementById('tutorial-tooltip');
            const highlight = document.getElementById('highlight');
            
            // Show modal if needed for this step
            if (step.showModal) {
                document.getElementById('modal').classList.remove('hidden');
            } else if (stepIndex > 0 && tutorialSteps[stepIndex - 1].showModal && !step.showModal) {
                document.getElementById('modal').classList.add('hidden');
            }
            
            // Update tooltip content
            tooltip.innerHTML = `
                <h3>${step.title}</h3>
                <p>${step.content}</p>
                <div class="tooltip-buttons">
                    ${stepIndex > 0 ? '<button class="tooltip-button secondary" id="prev-button">Previous</button>' : ''}
                    <button class="tooltip-button" id="next-button">
                        ${stepIndex === tutorialSteps.length - 1 ? 'Finish' : 'Next'}
                    </button>
                </div>
                <div class="progress-dots">
                    ${tutorialSteps.map((_, i) => 
                        `<div class="progress-dot ${i === stepIndex ? 'active' : ''}"></div>`
                    ).join('')}
                </div>
            `;
            
            // Position highlight and tooltip
            if (step.element === "welcome" || step.element === "complete") {
                // Center in the screen for intro and completion
                tooltip.style.top = '50%';
                tooltip.style.left = '50%';
                tooltip.style.transform = 'translate(-50%, -50%)';
                highlight.style.display = 'none';
            } else {
                // Highlight specific element
                const element = document.getElementById(step.element);
                if (element) {
                    const rect = element.getBoundingClientRect();
                    
                    // Position highlight
                    highlight.style.display = 'block';
                    highlight.style.top = `${rect.top - 10}px`;
                    highlight.style.left = `${rect.left - 10}px`;
                    highlight.style.width = `${rect.width + 20}px`;
                    highlight.style.height = `${rect.height + 20}px`;
                    
                    // Position tooltip
                    let tooltipLeft = rect.left + rect.width + 30;
                    let tooltipTop = rect.top;
                    
                    // Check if tooltip would go off-screen to the right
                    if (tooltipLeft + 320 > window.innerWidth) {
                        tooltipLeft = rect.left - 320;
                        if (tooltipLeft < 10) tooltipLeft = 70; // Prevent going off-screen to the left
                    }
                    
                    // Check if tooltip would go off-screen at the bottom
                    if (tooltipTop + 200 > window.innerHeight) {
                        tooltipTop = window.innerHeight - 220;
                        if (tooltipTop < 10) tooltipTop = 10; // Prevent going off-screen at the top
                    }
                    
                    tooltip.style.top = `${tooltipTop}px`;
                    tooltip.style.left = `${tooltipLeft}px`;
                    tooltip.style.transform = 'none';
                }
            }
            
            // Add event listeners to buttons
            if (document.getElementById('next-button')) {
                document.getElementById('next-button').addEventListener('click', function() {
                    showTutorialStep(stepIndex + 1);
                });
            }
            
            if (document.getElementById('prev-button')) {
                document.getElementById('prev-button').addEventListener('click', function() {
                    showTutorialStep(stepIndex - 1);
                });
            }
        }

        // Function to end the tutorial
        function endTutorial() {
            // Make sure modal is hidden when tutorial ends
            document.getElementById('modal').classList.add('hidden');
            
            const tutorialOverlay = document.getElementById('tutorial-overlay');
            tutorialOverlay.innerHTML = `
                <div class="completion-message">
                    <h2>Tutorial Completed! ðŸŽ‰</h2>
                    <p>You're now ready to use the Department Management system.</p>
                    <button class="tooltip-button" id="finish-button">Close</button>
                </div>
            `;
            
            document.getElementById('finish-button').addEventListener('click', function() {
                tutorialOverlay.style.display = 'none';
                isTutorialActive = false;
            });
        }

        // Handle window resize to reposition tooltip and highlight
        window.addEventListener('resize', function() {
            if (isTutorialActive) {
                showTutorialStep(currentStep);
            }
        });

        // Original department.js functionality (simplified version)
        document.addEventListener('DOMContentLoaded', function() {
            // Open modal
            const openModalBtn = document.getElementById('openModal');
            const modal = document.getElementById('modal');
            const closeModalBtn = document.getElementById('closeModal');
            
            if (openModalBtn) {
                openModalBtn.addEventListener('click', function() {
                    modal.classList.remove('hidden');
                });
            }
            
            if (closeModalBtn) {
                closeModalBtn.addEventListener('click', function() {
                    modal.classList.add('hidden');
                });
            }
            
            // Dropdown functionality
            const actionBtns = document.querySelectorAll('.action-btn');
            
            actionBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const dropdownContent = this.nextElementSibling;
                    dropdownContent.classList.toggle('show');
                });
            });
            
            // Close dropdowns when clicking outside
            window.addEventListener('click', function(event) {
                if (!event.target.matches('.action-btn')) {
                    const dropdowns = document.querySelectorAll('.dropdown-content');
                    dropdowns.forEach(dropdown => {
                        if (dropdown.classList.contains('show')) {
                            dropdown.classList.remove('show');
                        }
                    });
                }
            });
        });
    </script>
</body>
</html>