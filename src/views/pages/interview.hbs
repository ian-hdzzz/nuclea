
<head>
    <link rel="stylesheet" href="/css/interview.css">
</head>

<div class="container-one">
    <div class="container-questions">
      {{#if employee}}
        <div class="header">
            <div class="photo">
                <p>{{employee.initial}}</p>
            </div>
            <div class="profile">
                <h1>{{employee.Nombre}}  {{employee.Apellidos}}</h1>
                <p>Software Department</p>
            </div>
        </div>
        {{/if}}
        <div class="survey-container" id="survey-container">
            <div id="interview1">
                {{> interview1 }}
            </div>

            <div id="interview2" style="display: none;">
                {{> interview2 }}
            </div>
        </div>
    </div>
    <div class="sidebar">
        <div class="user-data">
             <h3 className="text-lg font-medium mb-4 text-white">Employee Information</h3>
             <div class="target">
                <p class="label">Name:</p>
                <p class="description">{{employee.Nombre}}  {{employee.Apellidos}}</p>
              </div>
             <div class="target">
                <p class="label">Department:</p>
                <p class="description">Engineering</p>
              </div>
             <div class="target">
                <p class="label">Time in the company:</p>
                <p class="description">{{employee.timeInCompany}}</p>
              </div>
             <div class="target">
                <p class="label">Administrative faults:</p>
                <p class="description">None</p>
              </div>
        </div>

            
    </div>
</div>
<script>
let currentQuestion = 1;
const totalQuestions = 4;
const responses = {}; // Object to store responses for each question

function updateProgressBar() {
  const progressElement = document.querySelector('.progress');
  const progressPercentage = (currentQuestion / totalQuestions) * 100;
  progressElement.style.width = `${progressPercentage}%`;
}

document.addEventListener('DOMContentLoaded', function () {
  const nextButton = document.getElementById('next-btn');
  const prevButton = document.querySelector('.btn-secondary');
  const questionIndicator = document.querySelector('.indicator p');
  const questionTitle = document.querySelector('.question h1');
  const questionDescription = document.querySelector('.question p');
  const textarea = document.querySelector('textarea');
  const form = document.getElementById('interviewForm');

  const questions = {{{json preguntasAbiertas}}};

  function updateQuestion() {
    questionIndicator.textContent = `Question ${currentQuestion} of ${totalQuestions}`;
    questionTitle.textContent = questions[currentQuestion - 1].pregunta;
    questionDescription.textContent = questions[currentQuestion - 1].descripcion;
    updateProgressBar();

    if (currentQuestion === totalQuestions) {
      nextButton.innerHTML = 'Next Survey<i class="fa-solid fa-caret-right"></i>';
      nextButton.classList.add('final-step');
    } else {
      nextButton.innerHTML = 'Next<i class="fa-solid fa-caret-right"></i>';
      nextButton.classList.remove('final-step');
    }
  }

  nextButton.addEventListener('click', function () {
    // Save current response
    responses[questions[currentQuestion - 1].idPreguntaAbierta] = textarea.value;
    
    if (nextButton.classList.contains('final-step')) {
      // Save all responses before moving to the next survey
      saveResponses();
      
      // Show the second interview form
      document.getElementById('interview1').style.display = 'none';
      document.getElementById('interview2').style.display = 'block';
      return;
    }

    if (currentQuestion < totalQuestions) {
      currentQuestion++;
      updateQuestion();
      textarea.value = responses[questions[currentQuestion - 1].idPreguntaAbierta] || '';
    }
  });

  prevButton.addEventListener('click', function () {
    // Save current response
    responses[questions[currentQuestion - 1].idPreguntaAbierta] = textarea.value;
    
    if (currentQuestion > 1) {
      currentQuestion--;
      updateQuestion();
      textarea.value = responses[questions[currentQuestion - 1].idPreguntaAbierta] || '';
    }
  });
  
  function saveResponses() {
    // Create form data object
    const formData = new FormData();
    
    // Add all responses
    for (const [questionId, response] of Object.entries(responses)) {
      formData.append(`respuestas[${questionId}]`, response);
    }
    
    // Add user ID from the URL
    const userId = window.location.pathname.split('/').pop();
    formData.append('idUsuario', userId);
    
    // Send data using fetch API
    fetch('/nuclea/interview/' + userId, {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .catch(error => {
      console.error('Error saving responses:', error);
    });
  }

  updateQuestion(); // Initialize question and progress
});

// Add event listener for the save button in the second form
document.getElementById('save-button').addEventListener('click', function() {
  const selectInputs = document.querySelectorAll('#interview2 select');
  const closedResponses = {};
  
  selectInputs.forEach(select => {
    closedResponses[select.id] = select.value;
  });
  
  // Create form data
  const formData = new FormData();
  
  // Add all closed question responses
  for (const [questionName, value] of Object.entries(closedResponses)) {
    formData.append(`closedResponses[${questionName}]`, value);
  }
  
  // Add user ID from the URL
  const userId = window.location.pathname.split('/').pop();
  formData.append('idUsuario', userId);
  
  // Send data
  fetch('/nuclea/interview/closed/' + userId, {
    method: 'POST',
    body: formData
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert('Evaluación guardada exitosamente');
      window.location.href = '/nuclea/dashboard'; // Redirect to dashboard
    } else {
      alert('Error al guardar la evaluación');
    }
  })
  .catch(error => {
    console.error('Error:', error);
  });
});
</script>
