<head>
    <link rel="stylesheet" href="/css/interview.css">
</head>

<div class="container-one">
    <div class="container-questions">
      {{#if employee}}
        <div class="header">
            <div class="photo">
                <p>{{employee.initial}}</p>
            </div>
            <div class="profile">
                <h1>{{employee.Nombre}}  {{employee.Apellidos}}</h1>
                <p>Department: {{#if employee.Departamentos}}{{ employee.Departamentos}}{{else}}Not specified{{/if}}</p>
            </div>
        </div>
        {{/if}}
        <div class="survey-container" id="survey-container">
          <input type="hidden" id="current-user-id" value="{{currentUser.idUsuario}}">
            <div id="interview1">
                {{> interview1 }}
            </div>

            <div id="interview2" style="display: none;">
                {{> interview2 }}
            </div>
        </div>
    </div>
    <div class="sidebar">
        <div class="user-data">
             <h3 className="text-lg font-medium mb-4 text-white">Employee Information</h3>
             <div class="target">
                <p class="label">Name:</p>
                <p class="description">{{employee.Nombre}}  {{employee.Apellidos}}</p>
              </div>
             <div class="target">
                <p class="label">Department:</p>
                <p class="description">{{#if employee.Departamentos}}{{ employee.Departamentos}}{{else}}Not specified{{/if}}</p>
              </div>
             <div class="target">
                <p class="label">Administrative faults:</p>
                <p class="description">None</p>
              </div>
        </div>
        <div class="comments-section">
          <div class="comments-container">
            <!-- Admin Comments (Paso 1) -->
            <div class="comment-box admin-comments" id="adminComments">
              <h3 class="comment-title">
                <i class="fa-solid fa-shield-halved"></i>
                Admin Comments
                <span class="subtitle">(personal notes)</span>
              </h3>
              <textarea 
                class="comment-textarea" 
                placeholder="Keep track on {{employee.Nombre}}'s performance..."
                rows="4"
              ></textarea>
              <div class="comments-navigation">
                <button class="nav-btn next-btn" onclick="showCollaboratorComments()">
                  Next <i class="fa-solid fa-arrow-right"></i>
                </button>
              </div>
            </div>

            <!-- Collaborator Comments (Paso 2) -->
            <div class="comment-box collaborator-comments hidden" id="collaboratorComments">
              <h3 class="comment-title">
                <i class="fa-solid fa-comment-dots"></i>
                Collaborator Comments
              </h3>
              <textarea 
                class="comment-textarea" 
                placeholder="{{employee.Nombre}}, here are some areas for improvement..."
                rows="4"
              ></textarea>
              <div class="comments-navigation">
                <button class="nav-btn prev-btn" onclick="showAdminComments()">
                  <i class="fa-solid fa-arrow-left"></i> Previous
                </button>
              </div>
            </div>
          </div>
        </div>
    </div>
</div>
<script>

document.addEventListener('DOMContentLoaded', function () {
  const nextButton = document.getElementById('next-btn');
  const prevButton = document.querySelector('.btn-secondary');
  const questionIndicator = document.querySelector('.indicator p');
  const questionTitle = document.querySelector('.question h1');
  const questionDescription = document.querySelector('.question p');
  const textarea = document.querySelector('textarea');
  const form = document.getElementById('interviewForm');
  const currentQuestionIdInput = document.getElementById('currentQuestionId');

  const questions = {{{json preguntas}}};
  let currentQuestion = 1;
  const totalQuestions = questions.filter(q => q.tipoPregunta === 'abierta').length;
  const responses = {}; // Object to store responses for each question

  // Filtrar solo preguntas abiertas para primera encuesta
  const openQuestions = questions.filter(q => q.tipoPregunta === 'abierta' && q.activa === 1);
  // Filtrar solo preguntas cerradas para segunda encuesta
  const closedQuestions = questions.filter(q => q.tipoPregunta === 'cerrada' && q.activa === 1);

  function updateProgressBar() {
    const progressElement = document.querySelector('.progress');
    const progressPercentage = (currentQuestion / openQuestions.length) * 100;
    progressElement.style.width = `${progressPercentage}%`;
  }

  function updateQuestion() {
    // Usamos los nombres de columna actualizados
    const question = openQuestions[currentQuestion - 1];
    questionIndicator.textContent = `Question ${currentQuestion} of ${openQuestions.length}`;
    questionTitle.textContent = question.pregunta;
    questionDescription.textContent = question.descripcionPregunta;
    
    // Actualizar el ID de la pregunta actual en el input oculto
    if (currentQuestionIdInput) {
      currentQuestionIdInput.value = question.preguntaId;
    }
    
    // Cargar respuesta existente si hay una
    textarea.value = responses[question.preguntaId] || '';
    
    updateProgressBar();

    if (currentQuestion === openQuestions.length) {
      nextButton.innerHTML = 'Next Survey<i class="fa-solid fa-caret-right"></i>';
      nextButton.classList.add('final-step');
    } else {
      nextButton.innerHTML = 'Next<i class="fa-solid fa-caret-right"></i>';
      nextButton.classList.remove('final-step');
    }
  }

  // Función para guardar la respuesta actual
  function saveCurrentResponse() {
    const userId = new URLSearchParams(window.location.search).get('employee');
    console.log('ID de usuario:', userId);

    const currentQuestionData = openQuestions[currentQuestion - 1];
    if (currentQuestionData && textarea.value.trim() !== '') {
      responses[currentQuestionData.preguntaId] = textarea.value;
      console.log(`Saved response for question ${currentQuestionData.preguntaId}:`, textarea.value);
    }
  }

  // Añadir event listener para guardar automáticamente cuando el usuario escriba
  textarea.addEventListener('input', function() {
    const currentQuestionData = openQuestions[currentQuestion - 1];
    responses[currentQuestionData.preguntaId] = textarea.value;
  });

  nextButton.addEventListener('click', function () {
    // Guardar respuesta actual
    saveCurrentResponse();
    
    if (nextButton.classList.contains('final-step')) {
      // Verificar si todas las preguntas tienen respuesta
      const allQuestionsAnswered = openQuestions.every(q => 
        responses[q.preguntaId] && responses[q.preguntaId].trim() !== '');
      
      if (!allQuestionsAnswered) {
        const confirm = window.confirm('You haven’t answered all the questions. Do you still want to continue?');
        if (!confirm) return;
      }
      
      // Guardar todas las respuestas antes de pasar a la siguiente encuesta
      saveResponses(responses, 'open');
      
      // Mostrar la segunda forma de entrevista
      document.getElementById('interview1').style.display = 'none';
      document.getElementById('interview2').style.display = 'block';
      
      // Configurar la segunda encuesta (preguntas cerradas)
      setupClosedQuestions();
      return;
    }

    if (currentQuestion < openQuestions.length) {
      currentQuestion++;
      updateQuestion();
    }
  });

  prevButton.addEventListener('click', function () {
    // Guardar respuesta actual
    saveCurrentResponse();
    
    if (currentQuestion > 1) {
      currentQuestion--;
      updateQuestion();
    }
  });
  
  //Función para guardar respuestas
  function saveResponses(responsesData, type) {
    // Crear objeto de datos
    const formData = {
      idUsuario: new URLSearchParams(window.location.search).get('employee'),
      tipoPregunta: type, // 'open' o 'closed'
      respuestas: responsesData
    };
    
    // Mostrar las respuestas que se van a enviar (para depuración)
    console.log(`Sending ${type} responses:`, responsesData);
    
    // Obtener CSRF token si existe
    const csrfToken = document.querySelector('input[name="_csrf"]')?.value || '';
    
    // Enviar datos usando fetch API
    fetch('/nuclea/interview', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken
      },
      body: JSON.stringify(formData)
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        if (type === 'closed') {
          // Solo mostramos el mensaje después de guardar ambas encuestas
          alert('Evaluación guardada exitosamente');
          window.location.href = '/nuclea/one';
        }
      } else {
        console.error('Error:', data.message);
        alert('Error al guardar las respuestas: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error saving responses:', error);
      alert('Error al guardar las respuestas: ' + error.message);
    });
  }

  function setupClosedQuestions() {
    // Obtener el contenedor para las preguntas cerradas
    const closedQuestionsContainer = document.querySelector('#interview2 .closed-questions-container');
    if (!closedQuestionsContainer) {
      console.error('Closed questions container not found');
      return;
    }
    
    // Limpiar el contenedor
    closedQuestionsContainer.innerHTML = '';
    
    // Objeto para almacenar respuestas de preguntas cerradas
    const closedResponses = {};
    
    // Generar HTML para cada pregunta cerrada
    closedQuestions.forEach(question => {
      const questionDiv = document.createElement('div');
      questionDiv.className = 'closed-question';
      
      const questionTitle = document.createElement('h3');
      questionTitle.textContent = question.pregunta;
      
      const questionDescription = document.createElement('p');
      questionDescription.textContent = question.descripcionPregunta;
      
      const selectElement = document.createElement('select');
      selectElement.id = `question_${question.preguntaId}`;
      selectElement.className = 'rating-select';
      
      // Por defecto, seleccionar el valor medio
      const defaultValue = Math.floor((question.escalaMaxima + question.escalaMinima) / 2);
      closedResponses[question.preguntaId] = defaultValue.toString();
      
      // Añadir opciones basadas en la escala de la pregunta
      for (let i = question.escalaMinima; i <= question.escalaMaxima; i++) {
        const option = document.createElement('option');
        option.value = i;
        option.textContent = i;
        if (i === defaultValue) {
          option.selected = true;
        }
        selectElement.appendChild(option);
      }
      
      // Listener para guardar respuesta cuando cambia
      selectElement.addEventListener('change', function() {
        closedResponses[question.preguntaId] = this.value;
      });
      
      // Añadir todo al contenedor
      questionDiv.appendChild(questionTitle);
      questionDiv.appendChild(questionDescription);
      questionDiv.appendChild(selectElement);
      closedQuestionsContainer.appendChild(questionDiv);
    });
    
  }
  const goBackBtn = document.getElementById('go-back-btn');
if (goBackBtn) {
  goBackBtn.addEventListener('click', function () {
    const interview1 = document.getElementById('interview1');
    const interview2 = document.getElementById('interview2');

    if (interview2.style.display === 'block') {
      // Regresar a preguntas abiertas
      interview2.style.display = 'none';
      interview1.style.display = 'block';
    } else {
      // Si ya está en preguntas abiertas y quieres permitir ir a la anterior
      if (currentQuestion > 1) {
        currentQuestion--;
        updateQuestion();
      }
    }
  });
}
  const saveButton = document.getElementById('save-button');
  if (saveButton) {
    saveButton.addEventListener('click', function(e) {
      e.preventDefault();

      const closedResponses = {};
      const selects = document.querySelectorAll('.evaluation-field select');

      selects.forEach(select => {
        const questionId = select.id || select.name;
        if (questionId) {
          closedResponses[questionId] = select.value;
        }
      });

      if (Object.keys(closedResponses).length === 0) {
        alert('No se encontraron respuestas para enviar');
        return;
      }

      saveResponses(closedResponses, 'closed');
    });
  }

  // Initialize first question
  if (openQuestions.length > 0) {
    updateQuestion();
  } else {
    console.error('No open questions found');
  }
});

function showCollaboratorComments() {
  const adminComments = document.getElementById('adminComments');
  const collaboratorComments = document.getElementById('collaboratorComments');
  if (adminComments && collaboratorComments) {
    adminComments.classList.add('hidden');
    collaboratorComments.classList.remove('hidden');
  }
}

function showAdminComments() {
  const adminComments = document.getElementById('adminComments');
  const collaboratorComments = document.getElementById('collaboratorComments');
  if (adminComments && collaboratorComments) {
    collaboratorComments.classList.add('hidden');
    adminComments.classList.remove('hidden');
  }
}
</script>
